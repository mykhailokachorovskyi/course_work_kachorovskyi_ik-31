import config
import telebot
import requests
from config import token
from telebot import types


def telegram_bot():
    bot = telebot.TeleBot(token)
    response = requests.get(config.url).json()

    # –ü—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ '/start' –ø—Ä–∏–≤—ñ—Ç–∞—î–º–æ—Å—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.
    @bot.message_handler(commands=["start"])
    def start_message(message):
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç ‚úã\n–©–æ–± –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ –º–æ—ó–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –Ω–∞–ø–∏—à–∏: \n/help")

    # –ü—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ '/help' –ø–æ—è–≤–ª—è—î—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
    @bot.message_handler(commands=["help"])
    def help_message(message):
        bot.send_message(message.chat.id, "–°ommand list: ‚öô\n/quote- —Ü–∏—Ç–∞—Ç–∏ –≤—ñ–¥–æ–º–∏—Ö –ª—é–¥–µ–π üí°"
                                          "\n/joke - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∂–∞—Ä—Ç üòÇ"""
                                          "\n/exchange - –∫—É—Ä—Å –≤–∞–ª—é—Ç üí∞")

    # –ü—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ '/quotes' –ø–æ—è–≤–ª—è—î—Ç—å—Å—è –≤–∏–ø–∞–¥–∫–æ–≤–∞ —á–∏—Ç–∞—Ç–∞.
    @bot.message_handler(commands=["quote"])
    def quotes_message(message):
        url = "https://quotes15.p.rapidapi.com/quotes/random/"

        headers = {
            'x-rapidapi-key': "30ac74a7a3msh5ce4d557e7296c7p13cdf0jsn89552fa140f3",
            'x-rapidapi-host': "quotes15.p.rapidapi.com"
        }

        response = requests.request("GET", url, headers=headers)
        rq = response.json()
        out_quotes = rq["content"]
        out_quotess = rq["originator"]["name"]
        bot.send_message(
            message.chat.id,
            f"‚ùï{out_quotes},\n"
            f"üë®üèª‚Äçüíº{out_quotess}"
        )

    # –ü—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ '/joke' –ø–æ—è–≤–ª—è—î—Ç—å—Å—è –≤–∏–ø–∞–¥–∫–æ–≤–π –∂–∞—Ä—Ç.
    @bot.message_handler(commands=["joke"])
    def jokes_message(message):
        rq = requests.get("https://official-joke-api.appspot.com/random_joke")
        response = rq.json()
        setup_que = response["setup"]
        setup_ans = response["punchline"]
        bot.send_message(
            message.chat.id,
            f" -{setup_que},\n-{setup_ans}üòÇüòÇüòÇ")

    # –ü—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ '/exchange' –ø–æ—è–≤–ª—è—î—Ç—å—Å—è –∫—É—Ä—Å –≤–∞–ª—é—Ç, —Ç–∞–∫–∏—Ö —è–∫ usd/eur/rur/btc.

    @bot.message_handler(commands=['exchange'])
    def send_exch(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        itembtn1 = types.KeyboardButton('USD')
        itembtn2 = types.KeyboardButton('EUR')
        itembtn3 = types.KeyboardButton('RUB')
        itembtn4 = types.KeyboardButton('BTC')
        markup.add(itembtn1, itembtn2, itembtn3, itembtn4)
        msg = bot.send_message(message.chat.id,
                               "–î—ñ–∑–Ω–∞—Ç–∏—Å—å –∫—É—Ä—Å –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É —É –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—ñ", reply_markup=markup)
        bot.register_next_step_handler(msg, process_coin_step)

    def process_coin_step(message):
        try:
            markup = types.ReplyKeyboardRemove(selective=False)

            for coin in response:
                if (message.text == coin['ccy']):
                    bot.send_message(message.chat.id, printCoin(coin['buy'], coin['sale']),
                                     reply_markup=markup, parse_mode="Markdown")

        except Exception as e:
            bot.reply_to(message, 'ooops!')

    def printCoin(buy, sale):
        '''–í–∏–≤—ñ–¥ –∫—É—Ä—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É'''
        return "üí∞ *–ö—É—Ä—Å –∫—É–ø—ñ–≤–ª—ñ:* " + str(buy) + "\nüí∞ *–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂—É:* " + str(sale)

    bot.enable_save_next_step_handlers(delay=2)
    bot.load_next_step_handlers()

    bot.polling()

if __name__ == '__main__':
    telegram_bot()
